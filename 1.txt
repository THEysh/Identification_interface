
    def loadimg(self, folder_path):
        # 清除现有图片
        self.clearImages()
        # 更新文件夹信息
        self.leftRegion.folderInfoBtn.setText(f"{folder_path}")
        # 获取所有图片文件
        image_files = []
        for ext in self.rightRegion.image_extensions:
            image_files.extend(Path(folder_path).glob(f'*{ext}'))
        # 更新图片数量
        self.leftRegion.imageCountBtn.setText(f"图片数量：{len(image_files)}")
        for i, image_path in enumerate(image_files):
            load_thread = LoadImageThread(int(i), str(image_path), parent=self.rightRegion)
            load_thread.image_loaded.connect(self.loadImgDispaly)
            load_thread.start()
    def loadImgDispaly(self, index:int, img:AdaptiveImageLabel):
        row = index
        col = 0
        self.rightRegion.layout.addWidget(img, row, col)
        self.updateAllImages()

class LoadImageThread(QThread):
    image_loaded = pyqtSignal(int, AdaptiveImageLabel)
    def __init__(self,index:int, path:str, parent=None):
        super().__init__(parent)
        self.index = index
        self.path = path
        self.parent = parent
    def run(self):
        # 加载图片
        imageLabel = AdaptiveImageLabel(self.parent)
        imageLabel.setCustomImage(self.path)
        if not imageLabel.isNull():
            # 图片加载成功，触发信号
            self.image_loaded.emit(self.index, imageLabel)
        else:
            # 图片加载失败，可以触发一个错误信号
            print(f"Failed to load image from {self.path}")

        # for i, image_path in enumerate(image_files):
        #     imageLabel1 = AdaptiveImageLabel(self.rightRegion)
        #     imageLabel1.setCustomImage(str(image_path))
        #     row = i
        #     col = 0
        #     self.rightRegion.layout.addWidget(imageLabel1, row, col)
        # self.updateAllImages()